#!/bin/bash

FORCE_CONVERT=0
NEWFILE=1

# オプションの解析
while getopts fP: OPT
do
  case $OPT in
    f)  FORCE_CONVERT=1
        ;;
    esac
  done
shift  $(($OPTIND - 1))

# バージョンファイルがある場合
if [ -e /work/version.json ]; then
  # バージョンファイルを取得し、比較する
  wget -O /version_tmp.json https://rest.ensembl.org/info/data/?content-type=application/json 2> /dev/stdout
  OLD_VERSION=`cat /work/version.json | jq '.releases[0]'`
  NEW_VERSION=`cat /version_tmp.json | jq '.releases[0]'`
  
  # versionの取得に失敗した場合異常終了
  if [ -z "$OLD_VERSION" ] || [ -z "$NEW_VERSION" ]; then
    echo "バージョンの取得に失敗しました " > /dev/stderr
    echo "前回バージョン: $OLD_VERSION " > /dev/stderr
    echo "今回バージョン: $NEW_VERSION " > /dev/stderr
    exit 1
  fi
  
  
  # バージョンに更新がない場合
  if [ $OLD_VERSION = $NEW_VERSION ];then
    NEWFILE=0
  # バージョンに更新がある場合はすでにあるファイルに上書きする
  else
    cp /version_tmp.json /work/version.json
    cat /work/version.json | jq '.releases[0]' > /work/version.txt
    chmod 777 /work/version.json /work/version.txt
  fi
# バージョンファイルがない場合、バージョンファイルを取得する
else
  wget -O /work/version.json https://rest.ensembl.org/info/data/?content-type=application/json 2> /dev/stdout
  cat /work/version.json | jq '.releases[0]' > /work/version.txt
  chmod 777 /work/version.json /work/version.txt
fi

# バージョンに更新がなく、-fオプションが指定されていない場合はコンバートを実行しない
if [ $NEWFILE -eq 0 ] && [ $FORCE_CONVERT -eq 0 ]; then
  echo
  echo "No RDF files were generated because no new files were found at the download site."
  exit 0
fi

cd /ensembl

# バージョンに更新がある、またはアーカイブファイル
if [ ! $NEWFILE -eq 0 ] || [ ! -e /work/biomart_outputfile_1.txt ] || [ ! -e /work/biomart_outputfile_2.txt ] || [ ! -e /work/biomart_outputfile_3.txt ]; then
  # すでにアーカイブファイルが存在する場合は削除する
  test -e /work/biomart_outputfile_1.txt && rm /work/biomart_outputfile_1.txt
  test -e /work/biomart_outputfile_2.txt && rm /work/biomart_outputfile_2.txt
  test -e /work/biomart_outputfile_3.txt && rm /work/biomart_outputfile_3.txt
  
  # アーカイブファイルのダウンロード
  now=`date "+%Y%m%d-%H%M%S"`
  echo "Started download at $now"
  wget -O /work/biomart_outputfile_1.txt 'http://www.ensembl.org/biomart/martservice?query=<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE Query><Query  virtualSchemaName = "default" formatter = "TSV" header = "1" uniqueRows = "0" count = "" datasetConfigVersion = "0.6" ><Dataset name = "hsapiens_gene_ensembl" interface = "default" ><Attribute name = "ensembl_gene_id" /><Attribute name = "ensembl_transcript_id" /><Attribute name = "ensembl_peptide_id" /><Attribute name= "ensembl_exon_id" /><Attribute name = "external_gene_name" /><Attribute name = "description" /><Attribute name = "external_transcript_name" /><Attribute name = "chromosome_name" /><Attribute name = "start_position" /><Attribute name = "end_position" /><Attribute name = "strand" /><Attribute name = "transcript_start" /><Attribute name = "transcript_end" /><Attribute name = "gene_biotype" /></Dataset></Query>' 2> /dev/stdout &
  wget_1=`echo $?`
  wget -O /work/biomart_outputfile_2.txt 'http://www.ensembl.org/biomart/martservice?query=<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE Query><Query  virtualSchemaName = "default" formatter = "TSV" header = "1" uniqueRows = "0" count = "" datasetConfigVersion = "0.6" ><Dataset name = "hsapiens_gene_ensembl" interface = "default" ><Attribute name = "ensembl_gene_id" /><Attribute name = "ensembl_transcript_id" /><Attribute name = "ensembl_exon_id" /><Attribute name = "exon_chrom_start" /><Attribute name = "exon_chrom_end" /><Attribute name = "rank" /></Dataset></Query>' 2> /dev/stdout &
  wget_2=`echo $?`
  wget -O /work/biomart_outputfile_3.txt 'http://www.ensembl.org/biomart/martservice?query=<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE Query><Query  virtualSchemaName = "default" formatter = "TSV" header = "1" uniqueRows = "0" count = "" datasetConfigVersion = "0.6" ><Dataset name = "hsapiens_gene_ensembl" interface = "default" ><Attribute name = "ensembl_gene_id" /><Attribute name = "ensembl_transcript_id" /><Attribute name = "hgnc_id" /><Attribute name = "uniprotswissprot" /><Attribute name = "uniprotsptrembl" /></Dataset></Query>' 2> /dev/stdout &
  wget_3=`echo $?`
  wait

  now=`date "+%Y%m%d-%H%M%S"`
  echo "Finished download at $now"
  
  # アーカイブファイルの取得に失敗した場合は異常終了する
  if [ ! $wget_1 = 0 ] || [ ! $wget_2 -eq 0 ] || [ ! $wget_3 -eq 0 ]; then
    echo "アーカイブファイルの取得に失敗しました" > /dev/stderr
    exit 1
  fi

fi

# RDF変換の実行
now=`date "+%Y%m%d-%H%M%S"`
echo "Started convert at $now"
ruby ./rdf_converter_ensembl_human_grch37/rdf_converter_ensembl_grch37.rb -g /work/biomart_outputfile_1.txt -e /work/biomart_outputfile_2.txt -x /work/biomart_outputfile_3.txt 1> /data/ensembl.ttl 2> error.log

# エラーログの不要行を削除
cat error.log | sed -e '/gene_stable_id transcript_stable_id hgnc_id uniprotkb_swiss_prot_id uniprotkb_trembl_id/d' | sed -e '/parse external ..../d' | sed -e '/parse ..../d' | sed -e '/rdf ..../d' > /dev/stderr

chmod 777 /data/ensembl.ttl /work/biomart_outputfile_1.txt /work/biomart_outputfile_2.txt /work/biomart_outputfile_3.txt
now=`date "+%Y%m%d-%H%M%S"`
echo "Finished convert at $now"

